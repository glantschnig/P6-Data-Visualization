xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p4<-ggplot(data = rw, aes(x = rating, y = pH,
fill = rating)) +
ylab('pH') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
grid.arrange(p1,p2,p3,p4)
rm(p1,p2,p3,p4)
p1<-ggplot(data = rw, aes(x = rating, y = fixed.acidity,
fill = rating)) +
ylab('Fixed Acidity') +
xlab('Rating') +
geom_boxplot()+
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p2<-ggplot(data = rw, aes(x = rating, y = volatile.acidity,
fill = rating)) +
ylab('Volatile Acidity') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p3<-ggplot(data = rw, aes(x = rating, y = citric.acid,
fill = rating)) +
ylab('Citric Acid') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p4<-ggplot(data = rw, aes(x = rating, y = pH,
fill = rating)) +
ylab('pH') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
grid.arrange(p1,p2,p3,p4)
rm(p1,p2,p3,p4)
p1<-ggplot(data = rw, aes(x = rating, y = fixed.acidity,
fill = rating)) +
ylab('Fixed Acidity') +
xlab('Rating') +
geom_boxplot()+
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p2<-ggplot(data = rw, aes(x = rating, y = volatile.acidity,
fill = rating)) +
ylab('Volatile Acidity') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p3<-ggplot(data = rw, aes(x = rating, y = citric.acid,
fill = rating)) +
ylab('Citric Acid') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p4<-ggplot(data = rw, aes(x = rating, y = pH,
fill = rating)) +
ylab('pH') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
legend<-get_legend(p1)
grid.arrange(p1,p2,p3,p4,legend,ncol=2)
rm(p1,p2,p3,p4)
p1<-ggplot(data = rw, aes(x = rating, y = fixed.acidity,
fill = rating)) +
ylab('Fixed Acidity') +
xlab('Rating') +
geom_boxplot()+
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
legend<-get_legend(p1)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
p1<-ggplot(data = rw, aes(x = rating, y = fixed.acidity,
fill = rating)) +
ylab('Fixed Acidity') +
xlab('Rating') +
geom_boxplot()+
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p2<-ggplot(data = rw, aes(x = rating, y = volatile.acidity,
fill = rating)) +
ylab('Volatile Acidity') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p3<-ggplot(data = rw, aes(x = rating, y = citric.acid,
fill = rating)) +
ylab('Citric Acid') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p4<-ggplot(data = rw, aes(x = rating, y = pH,
fill = rating)) +
ylab('pH') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
legend<-get_legend(p1)
grid.arrange(p1,p2,p3,p4,legend,ncol=2)
legend<-get_legend(p1)
p1<-ggplot(data = rw, aes(x = rating, y = fixed.acidity,
fill = rating)) +
ylab('Fixed Acidity') +
xlab('Rating') +
geom_boxplot()+
theme(axis.text.x = element_text(size=7))+
theme(legend.text = element_text(size = 7))
legend<-get_legend(p1)
p1 <- p1 + theme(legend.position="none")
grid.arrange(p1,p2,p3,p4,legend,ncol=2)
p1<-ggplot(data = rw, aes(x = rating, y = fixed.acidity,
fill = rating)) +
ylab('Fixed Acidity') +
xlab('Rating') +
geom_boxplot()+
theme(axis.text.x = element_text(size=7))+
theme(legend.text = element_text(size = 7))
p2<-ggplot(data = rw, aes(x = rating, y = volatile.acidity,
fill = rating)) +
ylab('Volatile Acidity') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p3<-ggplot(data = rw, aes(x = rating, y = citric.acid,
fill = rating)) +
ylab('Citric Acid') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p4<-ggplot(data = rw, aes(x = rating, y = pH,
fill = rating)) +
ylab('pH') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
legend<-get_legend(p1)
p1 <- p1 + theme(legend.position="none")
grid.arrange(p1,p2,p3,p4,legend,ncol=2)
rm(p1,p2,p3,p4)
p1<-ggplot(data = rw, aes(x = rating, y = fixed.acidity,
fill = rating)) +
ylab('Fixed Acidity') +
xlab('Rating') +
geom_boxplot()+
theme(axis.text.x = element_text(size=7))+
theme(legend.text = element_text(size = 7))
p2<-ggplot(data = rw, aes(x = rating, y = volatile.acidity,
fill = rating)) +
ylab('Volatile Acidity') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p3<-ggplot(data = rw, aes(x = rating, y = citric.acid,
fill = rating)) +
ylab('Citric Acid') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
p4<-ggplot(data = rw, aes(x = rating, y = pH,
fill = rating)) +
ylab('pH') +
xlab('Rating') +
geom_boxplot() +
theme(axis.text.x = element_text(size=7))+
theme(legend.position="none")+
theme(legend.text = element_text(size = 7))
legend<-get_legend(p1)
p1 <- p1 + theme(legend.position="none")
grid.arrange(p1,p2,p3,p4,legend.position="top",ncol=2)
grid.arrange(p1,p2,p3,p4,legend,ncol=2)
grid.arrange(p1,p2,p3,p4,legend,ncol=3)
grid.arrange(legend)
grid.arrange(p1,p2,p3,p4, ncol=2)
``` {r echo=FALSE, message=FALSE, fig.width=7, fig.height=4, Univariate_Plots}
# exploratory, quick histogram plots
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
rw <- read.csv("wineQualityReds.csv")
rw <- read.csv("FinalProject/wineQualityReds.csv")
str(rw)     #Compactly Display the
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
rw <- read.csv("wineQualityReds.csv")
rw <- read.csv("wineQualityReds.csv")
rw <- read.csv("FinalProject/wineQualityReds.csv")
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
rw <- read.csv("FinalProject/wineQualityReds.csv")
rid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
install.packages("cluster")
library(cluster)
library(factoextra)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
library(cluster)
library(factoextra)
libaray(ggplot)
libaray(ggplot2)
library(ggplot2)
library(factoextra)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
# Load the data set
data("USArrests")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(USArrests)
# View the firt 6 rows of the data
head(df, n = 6)
if(!require(devtools)) install.packages("devtools")
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(df)
head(df)
# Compute k-means clustering with k = 4
set.seed(123)
km.res <- kmeans(df, 4, nstart = 25)
print(km.res)
aggregate(USArrests, by=list(cluster=km.res$cluster), mean)
fviz_cluster(km.res, data = df)
clusplot(km.res, main = "Cluster plot, k = 4", color = TRUE)
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
rw <- read.csv("FinalProject/wineQualityReds.csv")
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
install.packages(c("car", "class", "dplyr", "evaluate", "foreign", "jsonlite", "knitr", "lme4", "MASS", "mime", "nlme", "nnet", "quantreg", "R6", "rJava", "rmarkdown", "SparseM", "spatial"))
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
rw <- read.csv("FinalProject/wineQualityReds.csv")
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
library("alr3", lib.loc="~/R/win-library/3.2")
library("assertthat", lib.loc="~/R/win-library/3.2")
library("BH", lib.loc="~/R/win-library/3.2")
library("bitops", lib.loc="~/R/win-library/3.2")
detach("package:alr3", unload=TRUE)
detach("package:assertthat", unload=TRUE)
detach("package:BH", unload=TRUE)
detach("package:bitops", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
rw <- read.csv("FinalProject/wineQualityReds.csv")
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
install.packages(c("GGally", "gridExtra", "dplyr", "scales", "memisc", "reshape"))
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
rw <- read.csv("FinalProject/wineQualityReds.csv")
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
library(ggplot2)
library(dplyr)
library(GGally)
library(scales)
library(memisc)
library(reshape)
library(gridExtra)
rw <- read.csv("FinalProject/wineQualityReds.csv")
grid.arrange(qplot(rw$fixed.acidity),
qplot(rw$volatile.acidity),
qplot(rw$citric.acid),
qplot(rw$residual.sugar),
qplot(rw$chlorides),
qplot(rw$free.sulfur.dioxide),
qplot(rw$total.sulfur.dioxide),
qplot(rw$density),
qplot(rw$pH),
qplot(rw$sulphates),
qplot(rw$alcohol),
qplot(rw$quality),
ncol = 4)
rw <- read.csv("baseball_data.csv")
setwd("C:/Users/d023553/Documents/Business/SeminarsBooks/NanoDegree_DataSience/Lesson6/ProjectL6/Baseball")
rw <- read.csv("baseball_data.csv")
